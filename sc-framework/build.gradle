plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.dokka'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'com.gradle.plugin-publish' version '0.21.0'
    id 'maven-publish'
    id 'java-gradle-plugin'
    id 'java-library'
    id 'groovy'
}

group = GROUP
version = VERSION_NAME

// Write the plugin's classpath to a file to share with the tests
task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.7.10")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3")
}

task docsJar(type: Jar, dependsOn: dokkaHtml) {
    group = 'Publications'
    description = 'Create jar of documentation.'
    archiveClassifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

task sourcesJar(type: Jar, dependsOn: classes) {
    group = 'Publications'
    description = 'Create jar of sources.'
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            artifact docsJar
            artifact sourcesJar

            pom {
                resolveStrategy = Closure.DELEGATE_FIRST
                name = POM_NAME
                description = POM_DESCRIPTION
                url = POM_URL
                inceptionYear = POM_INCEPTION_YEAR

                licenses {
                    license {
                        name = POM_LICENSE_NAME
                        url = POM_LICENSE_URL
                        distribution = POM_LICENSE_DIST
                    }
                }

                developers {
                    developer {
                        id = 'yunlongwen'
                        name = 'yunlong.wen'
                        email = '350394277@qq.com'
                    }
                }

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }

                issueManagement {
                    system = POM_ISSUE_SYSTEM
                    url = POM_ISSUE_URL
                }
            }
        }
    }
}

pluginBundle {
    website = POM_URL
    vcsUrl = POM_SCM_URL
    tags = ['dependencies', 'versions', 'updates']
}
gradlePlugin {
    plugins {
        versionsPlugin {
            id = 'com.github.sc.framework'
            displayName = POM_NAME
            implementationClass = 'com.github.yunlongwen.gradle.versions.VersionsPlugin'
            description = POM_DESCRIPTION
        }
    }
}
